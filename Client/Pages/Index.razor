@page "/"
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using SampleBlazorSignalRChat.Shared
@using SampleBlazorSignalRChat.Shared.Constants
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>

@if(!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="Write your username here" />
        <button class="btn btn-primary form-group-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    @*<textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
        @messages
    </textarea>*@
    
    <div class="container clearfix">
         <div class="chat">   
            <div class="chat-history">
                <ul class="chat-ul">
                    @foreach (var message in messages){
                        <li class="clearfix">
                            @if(IsSelfMessage(message)){
                                <div class="message-data align-right">
                                    <span class="message-data-name">You, @message.Timestamp</span> <i class="oi oi-media-record me"></i>
                                </div>
                                <div class="message me-message float-right">@message.Text</div>

                            }
                            else if (IsSystemMessage(message))
                            {
                                <h2>@message.Text</h2>
                            }
                            else
                            {
                                <div class="message-data">
                                    <span class="message-data-name"><i class="oi oi-media-record"></i>@message.Username, @message.Timestamp</span>
                                </div>
                                <div class="message you-message">
                                    @message.Text
                                </div>
                            }
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="input-group">
        <input @bind-value="message" @bind-value:event="oninput" @onkeyup="HandleInput" class="form-control" />
        <button class="btn btn-primary form-groupd-append" @onclick="Send" disabled="@(!IsConnected)">Send</button>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private string username = string.Empty;
    private string message = string.Empty;
    private ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
            .Build();

        hubConnection.On<string, string>(Constants.ChatHubReceiveMessageMethodName, (user, message) =>
        {
            messages.Add(new ChatMessage()
            {
                Timestamp = DateTime.Now,
                Username = user,
                Text = message
            });
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if(hubConnection != null)
        {
            await hubConnection.SendAsync(Constants.ChatHubSendMessageMethodName, username, message);
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if(args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public bool IsSelfMessage(ChatMessage msg)
    {
        return msg.Username == username;
    }

    public bool IsSystemMessage(ChatMessage msg)
    {
        return string.IsNullOrEmpty(msg.Username);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }


}
